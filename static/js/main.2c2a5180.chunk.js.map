{"version":3,"sources":["DailyForecast.js","DailyForecastPanel.js","App.js","index.js"],"names":["DailyForecast","props","toNormalDate","dt","date","Date","getDate","getMonth","className","onClick","this","weather","Math","round","temp","day","React","Component","DailyForecastPanel","description","feels_like","pressure","humidity","wind_deg","wind_speed","clouds","App","goBack","history","state","pop","activePanel","length","bridge","send","setState","goForward","push","error","isLoaded","temperature","city","other","forecast","lat","long","then","data","fetch","res","json","result","main","name","daily","slice","console","log","alerts","catch","message","platform","hours","getHours","time","feeling","fore_weather","map","fore_panels","id","left","label","undefined","onSwipeBack","autoplay","loop","src","style","height","width","mode","wind","deg","speed","all","display","alignItems","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"gPAyBeA,E,kDAtBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAGVC,aAAe,SAACC,GACZ,IACIC,EAAO,IAAIC,KAAU,IAALF,GAGpB,OAFUC,EAAKE,UAEF,IAJE,CAAC,uCAAU,6CAAW,iCAAS,uCAAU,qBAAO,2BAAQ,2BAAQ,6CAAW,mDAAY,6CAAW,uCAAU,8CAG/GF,EAAKG,aARF,E,0CAYnB,WACI,OACI,yBAAKC,UAAU,WAAWC,QAASC,KAAKT,MAAMQ,SAC1C,wBAAID,UAAU,aAAaE,KAAKR,aAAaQ,KAAKT,MAAMU,QAAQR,KAChE,wBAAIK,UAAU,aAAaI,KAAKC,MAAMH,KAAKT,MAAMU,QAAQG,KAAKC,KAA9D,mB,GAjBYC,IAAMC,WC4BnBC,E,kDA3BX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAGVC,aAAe,SAACC,GACZ,IACIC,EAAO,IAAIC,KAAU,IAALF,GAGpB,OAFUC,EAAKE,UAEF,IAJE,CAAC,uCAAU,6CAAW,iCAAS,uCAAU,qBAAO,2BAAQ,2BAAQ,6CAAW,mDAAY,6CAAW,uCAAU,8CAG/GF,EAAKG,aARF,E,0CAYnB,WACI,OACI,6BACR,uBAAGC,UAAU,eAAb,yCAAoCE,KAAKT,MAAMU,QAAQA,QAAQ,GAAGQ,aAClE,uBAAGX,UAAU,eAAb,uEAAyCE,KAAKT,MAAMU,QAAQG,KAAKC,IAAjE,cACA,uBAAGP,UAAU,eAAb,8EAA2CE,KAAKT,MAAMU,QAAQS,WAAWL,IAAzE,cACA,uBAAGP,UAAU,eAAb,qDAAsCE,KAAKT,MAAMU,QAAQU,SAAzD,uBACA,uBAAGb,UAAU,eAAb,2DAAuCE,KAAKT,MAAMU,QAAQW,SAA1D,KACA,uBAAGd,UAAU,eAAb,mCAAmCE,KAAKT,MAAMU,QAAQY,SAAtD,QAAkEb,KAAKT,MAAMU,QAAQa,WAArF,kBACA,uBAAGhB,UAAU,eAAb,iEAAwCE,KAAKT,MAAMU,QAAQc,OAA3D,U,GAtB6BT,IAAMC,WCwNxBS,E,kDAhNd,WAAYzB,GAAQ,IAAD,8BACZ,cAAMA,IAmEb0B,OAAS,WACR,IAAMC,EAAO,YAAO,EAAKC,MAAMD,SAC/BA,EAAQE,MACR,IAAMC,EAAcH,EAAQA,EAAQI,OAAS,GACzB,SAAhBD,GACFE,IAAOC,KAAK,2BAEd,EAAKC,SAAS,CAAEP,UAASG,iBA3EP,EA8EnBK,UAAY,SAACL,GACZ,IAAMH,EAAO,YAAO,EAAKC,MAAMD,SAC/BA,EAAQS,KAAKN,GACkB,SAA3B,EAAKF,MAAME,aACbE,IAAOC,KAAK,4BAEd,EAAKC,SAAS,CAAEP,UAASG,iBApFP,EAuFnB7B,aAAe,SAACC,GACT,IACIC,EAAO,IAAIC,KAAU,IAALF,GAGpB,OAFUC,EAAKE,UAEF,IAJE,CAAC,uCAAU,6CAAW,iCAAS,uCAAU,qBAAO,2BAAQ,2BAAQ,6CAAW,mDAAY,6CAAW,uCAAU,8CAG/GF,EAAKG,aAzFvB,EAAKsB,MAAQ,CACZS,MAAO,KACPC,UAAU,EACVC,YAAa,EACbC,KAAM,GACNrB,WAAY,GACZjB,GAAI,EACJQ,QAAS,GACT+B,MAAO,GACPC,SAAU,GACVZ,YAAa,OACbH,QAAS,CAAC,SAbO,E,qDAiBnB,WAAqB,IAAD,OACfgB,EAAM,EACAC,EAAO,EACXZ,IACKC,KAAK,sBACLY,MAAK,SAAAC,GACFH,EAAMG,EAAKH,IACXC,EAAOE,EAAKF,KACZG,MAAM,uDAAwDJ,EAAK,QAAUC,EAAO,gEAC/EC,MAAK,SAAAG,GAAG,OAAIA,EAAIC,UAChBJ,MACD,SAACK,GACG,EAAKhB,SAAS,CACVK,YAAaW,EAAOC,KAAKtC,KACzB2B,KAAMU,EAAOE,KACbjC,WAAY+B,EAAOC,KAAKhC,WACxBjB,GAAIgD,EAAOhD,GACXQ,QAASwC,EAAOxC,QAAQ,GAAGQ,YAChDuB,MAAOS,OAGM,SAACb,GACG,EAAKH,SAAS,CACVI,UAAU,EACVD,aAIxBU,MAAM,uDAAwDJ,EAAK,QAAUC,EAAO,gEACnEC,MAAK,SAAAG,GAAG,OAAIA,EAAIC,UAChBJ,MACD,SAACK,GACG,EAAKhB,SAAS,CACVI,UAAU,EACVI,SAAUQ,EAAOG,MAAMC,MAAM,KAEnDC,QAAQC,IAAIN,EAAOO,WAEL,SAACpB,GACG,EAAKH,SAAS,CACVI,UAAU,EACVD,gBAKfqB,OAAM,SAAArB,GACHkB,QAAQC,IAAInB,EAAMsB,c,oBA+BjC,WAAU,IAAD,OACAC,EAAanD,KAAKT,MAAlB4D,SADA,EAEiFnD,KAAKmB,MAAtFS,EAFA,EAEAA,MAAOC,EAFP,EAEOA,SAAUC,EAFjB,EAEiBA,YAAaC,EAF9B,EAE8BA,KAAMrB,EAFpC,EAEoCA,WAAYjB,EAFhD,EAEgDA,GAAIQ,EAFpD,EAEoDA,QAAS+B,EAF7D,EAE6DA,MAAOC,EAFpE,EAEoEA,SAElEmB,EADO,IAAIzD,KAAU,IAALF,GACH4D,WACbC,EAAO,iCACPF,GAAS,IAAMA,GAAS,EAAKE,EAAO,iCAAoBF,GAAS,GAAOE,EAAO,6CAAsBF,GAAS,KAAME,EAAO,4BACrI,IAAIC,EAAUrD,KAAKC,MAAMO,GACrB8C,EAAe,YAAIvB,GAAUwB,KAAI,SAACpD,GAAD,OACpC,kBAAC,EAAD,CAAeJ,QAASI,EAAKN,QAAU,kBAAM,EAAK2B,UAAUrB,EAAIZ,UAE7DiE,EAAc,YAAIzB,GAAUwB,KAAI,SAACpD,GAAD,OACnC,kBAAC,IAAD,CAAOsD,GAAItD,EAAIZ,IACd,kBAAC,IAAD,CACYmE,KAAM,kBAAC,IAAD,CAAkB7D,QAAS,kBAAM,EAAKkB,UAAU4C,MAAoB,UAAbV,EAAuB,sCAAUW,KAD1G,wCAGoB,EAAKtE,aAAaa,EAAIZ,KAE1C,kBAAC,EAAD,CAAoBQ,QAASI,QAG/B,OAAIuB,EAEF,kBAAC,IAAD,CACCmC,YAAa/D,KAAKiB,OAClBC,QAASlB,KAAKmB,MAAMD,QACpBG,YAAarB,KAAKmB,MAAME,aAExB,kBAAC,IAAD,CAAOsC,GAAG,QACT,kBAAC,IAAD,CAAaC,KAAM,kBAAC,IAAD,OAAnB,wCACA,6BAAMhC,EAAMsB,WAINrB,EAuBR,kBAAC,IAAD,CACCkC,YAAa/D,KAAKiB,OAClBC,QAASlB,KAAKmB,MAAMD,QACpBG,YAAarB,KAAKmB,MAAME,aAExB,kBAAC,IAAD,CAAOsC,GAAG,QACP,kBAAC,IAAD,KAAc5B,GACd,6BACD,yBAAKjC,UAAU,gBACd,wBAAIA,UAAU,YAAd,8CAAkCwD,EAAlC,IAAwC,0BAAMxD,UAAU,aAAaE,KAAKR,aAAaC,KACvF,yBAAKK,UAAU,eACd,wBAAIA,UAAU,QAAQgC,EAAtB,cACA,kBAAC,IAAD,CACCkC,UAAQ,EACRC,MAAI,EACJC,IAAI,yDACJC,MAAO,CAACC,OAAQ,QAASC,MAAO,YAGtB,wBAAIvE,UAAU,aAAd,6EAAyCyD,EAAzC,cACA,wBAAIzD,UAAU,eAAd,+CAAsCG,IAEnD,kBAAC,IAAD,KACY,kBAAC,IAAD,CAAYF,QAAU,kBAAM,EAAK2B,UAAU,kBAA3C,mEAIZ,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAQ4C,KAAK,aAAb,8CACCd,KAIJ,kBAAC,IAAD,CAAOG,GAAG,gBACT,kBAAC,IAAD,CACYC,KAAM,kBAAC,IAAD,CAAkB7D,QAAS,kBAAM,EAAKkB,UAAU4C,MAAoB,UAAbV,EAAuB,sCAAUW,KAD1G,mFAKA,6BACC,uBAAGhE,UAAU,eAAb,mCAAmCiC,GACnC,uBAAGjC,UAAU,eAAb,yCAAoCG,GACpC,uBAAGH,UAAU,eAAb,uEAAyCgC,EAAzC,cACA,uBAAGhC,UAAU,eAAb,8EAA2CY,EAA3C,cACA,uBAAGZ,UAAU,eAAb,qDAAsCkC,EAAMU,KAAK/B,SAAjD,uBACA,uBAAGb,UAAU,eAAb,2DAAuCkC,EAAMU,KAAK9B,SAAlD,KACA,uBAAGd,UAAU,eAAb,mCAAmCkC,EAAMuC,KAAKC,IAA9C,QAAqDxC,EAAMuC,KAAKE,MAAhE,kBACA,uBAAG3E,UAAU,eAAb,iEAAwCkC,EAAMjB,OAAO2D,IAArD,OAGDhB,GAvEF,kBAAC,IAAD,CACCK,YAAa/D,KAAKiB,OAClBC,QAASlB,KAAKmB,MAAMD,QACpBG,YAAarB,KAAKmB,MAAME,aAExB,kBAAC,IAAD,CAAOsC,GAAG,QACT,kBAAC,IAAD,4DACE,yBAAKQ,MAAO,CAAEQ,QAAS,OAAQC,WAAY,SAAUC,cAAe,WACnE,kBAAC,IAAD,CACCb,UAAQ,EACRC,MAAI,EACJC,IAAI,4DACJC,MAAO,CAAEC,OAAQ,QAASC,MAAO,kB,GAhJzB/D,IAAMC,WCHxBgB,IAAOC,KAAK,gBAEZsD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2c2a5180.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass DailyForecast extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    toNormalDate = (dt) => {\r\n        const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\r\n        let date = new Date(dt * 1000);\r\n        let day = date.getDate();\r\n        let month = date.getMonth();\r\n        return day + ' ' + months[month];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"forecast\" onClick={this.props.onClick}>\r\n                <h2 className=\"fore-date\">{this.toNormalDate(this.props.weather.dt)}</h2>\r\n                <h2 className=\"fore-temp\">{Math.round(this.props.weather.temp.day)}°С</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DailyForecast;","import React from 'react';\r\n\r\nclass DailyForecastPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    toNormalDate = (dt) => {\r\n        const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\r\n        let date = new Date(dt * 1000);\r\n        let day = date.getDate();\r\n        let month = date.getMonth();\r\n        return day + ' ' + months[month];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\t\t\t\t<p className='weatherInfo'>Погода: {this.props.weather.weather[0].description}</p>\r\n\t\t\t\t<p className='weatherInfo'>Температура: {this.props.weather.temp.day}°С</p>\r\n\t\t\t\t<p className='weatherInfo'>Ощущается как: {this.props.weather.feels_like.day}°С</p>\r\n\t\t\t\t<p className='weatherInfo'>Давление: {this.props.weather.pressure} гПа</p>\r\n\t\t\t\t<p className='weatherInfo'>Влажность: {this.props.weather.humidity}%</p>\r\n\t\t\t\t<p className='weatherInfo'>Ветер: {this.props.weather.wind_deg}° {this.props.weather.wind_speed} м/с</p>\r\n\t\t\t\t<p className='weatherInfo'>Облачность: {this.props.weather.clouds}%</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DailyForecastPanel;","import React from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport { View, Panel, PanelHeader, Group, CellButton, PanelHeaderBack, Header, SimpleCell, InfoRow, Tooltip } from '@vkontakte/vkui';\nimport {  Icon28ErrorCircleOutline } from '@vkontakte/icons';\nimport { Player } from '@lottiefiles/react-lottie-player';\nimport DailyForecast from './DailyForecast';\nimport DailyForecastPanel from './DailyForecastPanel';\n\nclass App extends React.Component {\n\tconstructor(props) {\n        super(props);\n\t\tthis.state = {\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\ttemperature: 0,\n\t\t\tcity: \"\",\n\t\t\tfeels_like: \"\",\n\t\t\tdt: 0,\n\t\t\tweather: \"\",\n\t\t\tother: '',\n\t\t\tforecast: '',\n\t\t\tactivePanel: 'main',\n\t\t\thistory: ['main']\n\t\t  };\n    }\n\n\tcomponentDidMount() {\n\t\tlet lat = 0;\n        let long = 0;\n        bridge\n            .send('VKWebAppGetGeodata')\n            .then(data => {\n                lat = data.lat;\n                long = data.long;\n                fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\n                    .then(res => res.json())\n                    .then(\n                    (result) => {\n                        this.setState({\n                            temperature: result.main.temp,\n                            city: result.name,\n                            feels_like: result.main.feels_like,\n                            dt: result.dt,\n                            weather: result.weather[0].description,\n\t\t\t\t\t\t\tother: result\n                        });\n                    },\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            error\n                    \t});\n                    }\n                )\n\t\t\t\tfetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\n                    .then(res => res.json())\n                    .then(\n                    (result) => {\n                        this.setState({\n                            isLoaded: true,\n                            forecast: result.daily.slice(1)\n                        });\n\t\t\t\t\t\tconsole.log(result.alerts);\n                    },\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            error\n                    \t});\n                    }\n                )\n            })\n            .catch(error => {\n                console.log(error.message);\n            });\n\t}\n\t\n\tgoBack = () => {\n\t\tconst history = [...this.state.history];\n\t\thistory.pop();\n\t\tconst activePanel = history[history.length - 1];\n\t\tif (activePanel === 'main') {\n\t\t  bridge.send('VKWebAppEnableSwipeBack');\n\t\t}\n\t\tthis.setState({ history, activePanel });\n\t}\n\t\n\tgoForward = (activePanel) => {\n\t\tconst history = [...this.state.history];\n\t\thistory.push(activePanel);\n\t\tif (this.state.activePanel === 'main') {\n\t\t  bridge.send('VKWebAppDisableSwipeBack');\n\t\t}\n\t\tthis.setState({ history, activePanel });\n\t}\n\n\ttoNormalDate = (dt) => {\n        const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\n        let date = new Date(dt * 1000);\n        let day = date.getDate();\n        let month = date.getMonth();\n        return day + ' ' + months[month];\n    }\n\n\trender() {\n\t\tconst { platform } = this.props;\n\t\tconst { error, isLoaded, temperature, city, feels_like, dt, weather, other, forecast } = this.state;\n        let date = new Date(dt * 1000);\n        let hours = date.getHours();\n        let time = 'утром';\n        if (hours >= 23 || hours <= 4) { time = 'ночью' } else if ( hours >= 18 ) { time = 'вечером' } else if ( hours >= 12) { time = 'днём' }\n\t\tlet feeling = Math.round(feels_like);\n\t\tlet fore_weather = [...forecast].map((day) =>\n\t\t\t<DailyForecast weather={day} onClick={ () => this.goForward(day.dt) } />\n\t\t);\n\t\tlet fore_panels = [...forecast].map((day) => (\n\t\t\t<Panel id={day.dt}>\n\t\t\t\t<PanelHeader\n              \t\tleft={<PanelHeaderBack  onClick={() => this.goBack()} label={platform === 'VKCOM' ? 'Назад' : undefined} />}\n            \t>\n              \t\tПогода {this.toNormalDate(day.dt)}\n            \t</PanelHeader>\n\t\t\t\t<DailyForecastPanel weather={day} />\n\t\t\t</Panel>\n\t\t));\n\t\tif (error) {\n\t\t\treturn (\n\t\t\t\t<View \n\t\t\t\t\tonSwipeBack={this.goBack}\n\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\tactivePanel={this.state.activePanel}\n\t\t\t\t>\n\t\t\t\t\t<Panel id='main'>\n\t\t\t\t\t\t<PanelHeader left={<Icon28ErrorCircleOutline />}>Ошибка</PanelHeader>\n\t\t\t\t\t\t<div>{error.message}</div>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t);} \n\t\telse if (!isLoaded) {\n\t\t\treturn (\n\t\t\t\t<View \n\t\t\t\t\tonSwipeBack={this.goBack}\n\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\tactivePanel={this.state.activePanel}\n\t\t\t\t>\n\t\t\t\t\t<Panel id='main'>\n\t\t\t\t\t\t<PanelHeader>Загрузка...</PanelHeader>\n\t\t\t  \t\t\t<div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n\t\t\t\t\t\t  \t<Player\n  \t\t\t\t\t\t\t\tautoplay\n  \t\t\t\t\t\t\t\tloop\n  \t\t\t\t\t\t\t\tsrc=\"https://assets4.lottiefiles.com/packages/lf20_Cemmpu.json\"\n  \t\t\t\t\t\t\t\tstyle={{ height: '300px', width: '300px' }}\n\t\t\t\t\t\t  \t>\n\t\t\t\t\t\t\t</Player>\n\t\t\t  \t\t\t</div>\n\t\t\t  \t\t</Panel>\n\t\t\t  \t</View>\n\t\t\t);} \n\t\telse {\n\t\t\treturn (\n\t\t\t\t<View \n\t\t\t\t\tonSwipeBack={this.goBack}\n\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\tactivePanel={this.state.activePanel}\n\t\t\t\t>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t  \t<PanelHeader>{city}</PanelHeader>\n\t\t\t\t\t  \t<div>\n\t\t\t\t\t\t\t<div className='main-weather'>\n\t\t\t\t\t\t\t\t<h2 className='dayMonth'>Сегодня {time} <span className='fadedText'>{this.toNormalDate(dt)}</span></h2>\n\t\t\t\t\t\t\t\t<div className='inline-temp'>\n\t\t\t\t\t\t\t\t\t<h3 className='temp'>{temperature}°С</h3>\n\t\t\t\t\t\t\t\t\t<Player\n\t\t\t\t\t\t\t\t\t\tautoplay\n\t\t\t\t\t\t\t\t\t\tloop\n\t\t\t\t\t\t\t\t\t\tsrc='https://assets10.lottiefiles.com/temp/lf20_WtPCZs.json'\n\t\t\t\t\t\t\t\t\t\tstyle={{height: '100px', width: '100px'}}\n\t\t\t\t\t\t\t\t\t></Player>\n\t\t\t\t\t\t\t\t</div>\n                \t\t\t\t<h3 className='feelsLike'>Ощущается как {feeling}°С</h3>\n                \t\t\t\t<h3 className='weatherName'>На улице {weather}</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Group>\n              \t\t\t\t\t<CellButton onClick={ () => this.goForward('more_weather') }>\n                \t\t\t\t\tЕщё о погоде\n              \t\t\t\t\t</CellButton>\n            \t\t\t\t</Group>\n\t\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t\t<Header mode='secondary'>Прогноз</Header>\n\t\t\t\t\t\t\t\t{fore_weather}\n\t\t\t\t\t\t\t</Group>\n            \t\t\t</div>\n\t\t\t\t\t</Panel>\n\t\t\t\t\t<Panel id='more_weather'>\n\t\t\t\t\t\t<PanelHeader\n              \t\t\t\tleft={<PanelHeaderBack  onClick={() => this.goBack()} label={platform === 'VKCOM' ? 'Назад' : undefined} />}\n            \t\t\t>\n              \t\t\t\tТекущая погода\n            \t\t\t</PanelHeader>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Город: {city}</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Погода: {weather}</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Температура: {temperature}°С</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Ощущается как: {feels_like}°С</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Давление: {other.main.pressure} гПа</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Влажность: {other.main.humidity}%</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Ветер: {other.wind.deg}° {other.wind.speed} м/с</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Облачность: {other.clouds.all}%</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Panel>\n\t\t\t\t\t{fore_panels}\n\t\t  \t\t</View>\n\t\t\t);}\n\t}\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}