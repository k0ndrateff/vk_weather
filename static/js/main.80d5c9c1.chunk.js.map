{"version":3,"sources":["img/loading.gif","img/error.png","img/clear.png","img/rain.png","img/mist.png","img/nightClear.png","img/nightRain.png","img/nightSnow.png","img/nightLightRain.png","img/autumnClouds.png","img/springClouds.png","img/summerClouds.png","img/winterClouds.png","img/springClear.png","App.js","index.js"],"names":["App","props","goBack","history","state","pop","activePanel","length","bridge","send","setState","goForward","push","modalBack","setActiveModal","modalHistory","activeModal","indexOf","splice","toNormalDate","dt","date","Date","getDate","getMonth","getTime","hour","getHours","minute","getMinutes","time","string","day","getDay","getSeason","month","updateGeoData","city","undefined","lat","long","then","data","error_type","fetch","res","json","result","weather","error","isLoaded","forecast","daily","slice","hourly","showWeatherImage","catch","lon","getCityValue","document","getElementById","value","lookupWeather","setTimeout","toWindDirection","deg","this","IMAGES","ClearImage","RainImage","MistImage","NightLightRainImage","NightRainImage","NightSnowImage","NightClearImage","AutumnCloudsImage","SpringClearImage","SpringCloudsImage","SummerCloudsImage","WinterCloudsImage","fore_weather","map","className","onClick","main","Math","round","temp","fore_panels","id","name","description","feels_like","sunrise","sunset","wind_deg","wind_speed","WeatherPanel","modal","onClose","header","left","right","top","placeholder","imagesPreload","image","src","onSwipeBack","ErrorImage","weatherImage","sys","wind","speed","LoadingImage","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.80d5c9c1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.71f6a116.gif\";","export default __webpack_public_path__ + \"static/media/error.def73663.png\";","export default __webpack_public_path__ + \"static/media/clear.bb693d08.png\";","export default __webpack_public_path__ + \"static/media/rain.cc74d3c5.png\";","export default __webpack_public_path__ + \"static/media/mist.f05a9e0a.png\";","export default __webpack_public_path__ + \"static/media/nightClear.fdaa924a.png\";","export default __webpack_public_path__ + \"static/media/nightRain.77d1efa6.png\";","export default __webpack_public_path__ + \"static/media/nightSnow.963b7cd9.png\";","export default __webpack_public_path__ + \"static/media/nightLightRain.1a8870bc.png\";","export default __webpack_public_path__ + \"static/media/autumnClouds.b5c3cb2c.png\";","export default __webpack_public_path__ + \"static/media/springClouds.4bc0e789.png\";","export default __webpack_public_path__ + \"static/media/summerClouds.97cf2434.png\";","export default __webpack_public_path__ + \"static/media/winterClouds.81ad28de.png\";","export default __webpack_public_path__ + \"static/media/springClear.643be763.png\";","import React from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport { Panel, View, ModalRoot, ModalPage, ModalPageHeader, PanelHeaderClose, PanelHeaderSubmit, FormItem, Input, FormLayout, HorizontalScroll, HorizontalCell, Group, List, Cell } from '@vkontakte/vkui';\r\n\r\nimport LoadingImage from './img/loading.gif';\r\nimport ErrorImage from './img/error.png';\r\nimport ClearImage from './img/clear.png';\r\nimport RainImage from './img/rain.png';\r\nimport MistImage from './img/mist.png';\r\nimport NightClearImage from './img/nightClear.png';\r\nimport NightRainImage from './img/nightRain.png';\r\nimport NightSnowImage from './img/nightSnow.png';\r\nimport NightLightRainImage from './img/nightLightRain.png';\r\nimport AutumnCloudsImage from './img/autumnClouds.png';\r\nimport SpringCloudsImage from './img/springClouds.png';\r\nimport SummerCloudsImage from './img/summerClouds.png';\r\nimport WinterCloudsImage from './img/winterClouds.png';\r\nimport SpringClearImage from './img/springClear.png';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n            isLoaded: false,\r\n            weather: '',\r\n            forecast: '',\r\n            hourly: '',\r\n            activePanel: 'weatherImage',\r\n            history: ['weatherImage'],\r\n            activeModal: null,\r\n            modalHistory: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let lat = 0;\r\n        let long = 0;\r\n        bridge.send('VKWebAppGetGeodata')\r\n                .then(data => {\r\n                    if (data.error_type == 'client_error') {\r\n                        lat = 30;\r\n                        long = 50;\r\n                    }\r\n                    else {\r\n                        lat = data.lat;\r\n                        long = data.long;\r\n                    }\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({ \r\n                                weather: result\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                            });\r\n                        })\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({\r\n                                isLoaded: true, \r\n                                forecast: result.daily.slice(1),\r\n                                hourly: result.hourly\r\n                            });\r\n                            this.showWeatherImage();\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                            });\r\n                        }\r\n                    )\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ \r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                });\r\n    }\r\n\r\n    goBack = () => {\r\n\t\tconst history = [...this.state.history];\r\n\t\thistory.pop();\r\n\t\tconst activePanel = history[history.length - 1];\r\n\t\tif (activePanel === 'main') {\r\n\t\t  bridge.send('VKWebAppEnableSwipeBack');\r\n\t\t}\r\n\t\tthis.setState({ history, activePanel });\r\n\t}\r\n\t\r\n\tgoForward = (activePanel) => {\r\n\t\tconst history = [...this.state.history];\r\n\t\thistory.push(activePanel);\r\n\t\tif (this.state.activePanel === 'main') {\r\n\t\t  bridge.send('VKWebAppDisableSwipeBack');\r\n\t\t}\r\n\t\tthis.setState({ history, activePanel });\r\n\t}\r\n\r\n    modalBack = () => {\r\n        this.setActiveModal(this.state.modalHistory[this.state.modalHistory.length - 2]);\r\n    };\r\n\r\n    setActiveModal = (activeModal) => {\r\n        activeModal = activeModal || null;\r\n        let modalHistory = this.state.modalHistory ? [...this.state.modalHistory] : [];\r\n    \r\n        if (activeModal === null) {\r\n          modalHistory = [];\r\n        } else if (modalHistory.indexOf(activeModal) !== -1) {\r\n          modalHistory = modalHistory.splice(0, modalHistory.indexOf(activeModal) + 1);\r\n        } else {\r\n          modalHistory.push(activeModal);\r\n        }\r\n    \r\n        this.setState({\r\n          activeModal,\r\n          modalHistory\r\n        });\r\n    };\r\n\r\n    toNormalDate = (dt) => {\r\n        const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\r\n        let date = new Date(dt * 1000);\r\n        let day = date.getDate();\r\n        let month = date.getMonth();\r\n        return day + ' ' + months[month];\r\n    }\r\n\r\n    getTime = (dt) => {\r\n        let date = new Date(dt * 1000);\r\n        let hour = date.getHours();\r\n        let minute = date.getMinutes();\r\n        let time = 'утром';\r\n        const week = ['Вс', 'Пн', 'Вт', 'Cр', 'Чт', 'Пт', 'Сб'];\r\n        let dayOfWeek = week[date.getDay()];\r\n        if (hour < 5 || hour > 22) { time = 'ночью' } else if (hour > 18) { time = 'вечером' } else if (hour > 10) { time = 'днём' }\r\n        if (hour < 10) { hour = '0' + hour; }\r\n        if (minute < 10) { minute = '0' + minute; }\r\n        let res = {\r\n            hour: hour,\r\n            minute: minute,\r\n            time: hour + ':' + minute,\r\n            string: time,\r\n            day: dayOfWeek\r\n        }\r\n        return res\r\n    }\r\n\r\n    getSeason = (dt) => {\r\n        let date = new Date(dt * 1000);\r\n        let month = date.getMonth();\r\n        if (month == 12 || month <= 1) {\r\n            return 'winter';\r\n        } \r\n        else if (month <= 4) {\r\n            return 'spring';\r\n        }\r\n        else if (month <= 7) {\r\n            return 'summer';\r\n        }\r\n        else { return 'autumn'; }\r\n    }\r\n\r\n    updateGeoData = (city) => {\r\n        this.modalBack();\r\n        if (city === null || city === undefined) {\r\n            let lat = 0;\r\n            let long = 0;\r\n            bridge.send('VKWebAppGetGeodata')\r\n                .then(data => {\r\n                    if (data.error_type == 'client_error') {\r\n                        lat = 30;\r\n                        long = 50;\r\n                    }\r\n                    else {\r\n                        lat = data.lat;\r\n                        long = data.long;\r\n                    }\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({ \r\n                                weather: result\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                            });\r\n                        })\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({\r\n                                isLoaded: true, \r\n                                forecast: result.daily.slice(1),\r\n                                hourly: result.hourly\r\n                            });\r\n                            this.showWeatherImage();\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                            });\r\n                        }\r\n                    )\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ \r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                });\r\n        } else {\r\n            fetch('https://api.openweathermap.org/geo/1.0/direct?q=' + city + '&appid=e937bb61987a79d09b7604a3375a9941')\r\n                .then(res => res.json())\r\n                .then((result) => {\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ result[0].lat +\"&lon=\" + result[0].lon + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({ \r\n                                weather: result\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                            });\r\n                    })\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\"+ result[0].lat +\"&lon=\" + result[0].lon + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                forecast: result.daily.slice(1),\r\n                                hourly: result.hourly\r\n                            });\r\n                            this.showWeatherImage();\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                        });\r\n                        })},\r\n            (error) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    getCityValue = () => {\r\n        if (document.getElementById('city') != null) {\r\n            return document.getElementById('city').value;\r\n        } \r\n        else { return null }\r\n    }\r\n\r\n    lookupWeather = (weather) => {\r\n         const list = {\r\n            'Thunderstorm': 'шторм',\r\n            'Drizzle': 'дождик',\r\n            'Rain': 'дождь',\r\n            'Snow': 'снег',\r\n            'Mist': 'туман',\r\n            'Smoke': 'смог',\r\n            'Haze': 'дымка',\r\n            'Dust': 'пыль',\r\n            'Fog': 'туман',\r\n            'Sand': 'песок',\r\n            'Ash': 'задымление',\r\n            'Squall': 'шквал',\r\n            'Tornado': 'торнадо',\r\n            'Clear': 'ясно',\r\n            'Clouds': 'облачно'\r\n        };\r\n        return list[weather];\r\n    }\r\n\r\n    showWeatherImage = () => { \r\n        this.goForward('weatherImage');\r\n        setTimeout(() => this.goForward('main'), 3000);\r\n    }\r\n\r\n    toWindDirection = (deg) => {\r\n        if (deg >= 330 || deg <= 30) {\r\n            return 'северный';\r\n        }\r\n        else if (deg < 60) {\r\n            return 'северо-восточный';\r\n        }\r\n        else if (deg < 120) {\r\n            return 'восточный';\r\n        }\r\n        else if (deg < 150) {\r\n            return 'юго-восточный';\r\n        }\r\n        else if (deg < 210) {\r\n            return 'южный';\r\n        }\r\n        else if (deg < 240) {\r\n            return 'юго-западный';\r\n        }\r\n        else if (deg < 300) {\r\n            return 'западный';\r\n        }\r\n        else { \r\n            return 'северо-западный';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, weather, hourly, forecast } = this.state;\r\n\r\n        const IMAGES = [ClearImage, RainImage, MistImage, NightLightRainImage, NightRainImage, NightSnowImage, NightClearImage,\r\n                        AutumnCloudsImage, SpringClearImage, SpringCloudsImage, SummerCloudsImage, WinterCloudsImage];\r\n\r\n        const WeatherPanel = (weather) => { \r\n            return (\r\n                <Panel id={weather.dt}>\r\n                    <div className='mainGradient fullHeight'>\r\n                        <div className='wrapper'>\r\n                            <h1 className='city' onClick={() => this.goBack() }>Назад</h1>\r\n                            <h1 className='displayText'>Погода {this.toNormalDate(weather.dt)} <span className='faded'>{this.getTime(weather.dt).day}</span></h1>\r\n                            <h2 className='cityUnder faded'>в городе {this.state.weather.name}</h2>\r\n                            <h2>⛅️ Погода: {weather.weather[0].description}</h2> \r\n                            <h2>🌡 Температура: {Math.round(weather.temp.day)}°C</h2>\r\n                            <h2>🤒 Ощущается как {Math.round(weather.feels_like.day)}°C</h2>\r\n                            <h2>🌅 Рассвет: {this.getTime(weather.sunrise).time}</h2>\r\n                            <h2>🌇 Закат: {this.getTime(weather.sunset).time}</h2>\r\n                            <h2>💨 Ветер: {this.toWindDirection(weather.wind_deg)} {Math.round(weather.wind_speed)} м/c</h2>\r\n                        </div>\r\n                    </div>\r\n                </Panel>\r\n        );};\r\n\r\n        let fore_weather = [...forecast].map((day) => (\r\n            <div className=\"laterBoxes foreBack faded\" onClick={() => this.goForward(day.dt) } >\r\n                <h2 className=\"fore\">{this.toNormalDate(day.dt)}</h2>\r\n                <h2 className=\"fore\">{this.lookupWeather(day.weather[0].main)}</h2>\r\n                <h2 className=\"fore\">{Math.round(day.temp.day)}°C</h2>\r\n            </div>\r\n        ));\r\n\r\n        let fore_panels = [...forecast].map((day) => (\r\n            WeatherPanel(day)\r\n        ));\r\n        \r\n        const modal = (\r\n            <ModalRoot\r\n                activeModal={this.state.activeModal}\r\n                onClose={this.modalBack}\r\n            >\r\n                <ModalPage\r\n                    id='chooseCity'\r\n                    onClose={this.modalBack}\r\n                    header={\r\n                        <ModalPageHeader\r\n                          left={<PanelHeaderClose onClick={this.modalBack}/>}\r\n                          right={<PanelHeaderSubmit onClick={() => { this.updateGeoData(this.getCityValue()); }}/>}\r\n                        >\r\n                          Выбрать город\r\n                        </ModalPageHeader>\r\n                      }\r\n                >\r\n                    <FormLayout>\r\n                        <FormItem top='Введите название'>\r\n                            <Input id='city' placeholder={weather.name} />\r\n                        </FormItem>\r\n                    </FormLayout> \r\n                    <Group>\r\n                        <List>\r\n                            <Cell onClick={() => { this.updateGeoData() }}>🏠 Геолокация</Cell>\r\n                            <Cell onClick={() => { this.updateGeoData('Москва') }}>🏰 Москва</Cell>\r\n                            <Cell onClick={() => { this.updateGeoData('Париж') }}>🗺 Париж</Cell>\r\n                            <Cell onClick={() => { this.updateGeoData('Нью-Йорк') }}>🗽 Нью-Йорк</Cell>\r\n                        </List>\r\n                    </Group>\r\n                </ModalPage>\r\n            </ModalRoot>\r\n        ); \r\n\r\n        let weatherImage = (weather) => { \r\n            if (this.getTime(weather.dt).hour > 20 || this.getTime(weather.dt).hour < 5) {\r\n                switch (weather.weather[0].main) {\r\n                    case 'Drizzle':\r\n                    case 'Rain':\r\n                        return NightLightRainImage;\r\n                    case 'Thunderstorm':\r\n                    case 'Squall':\r\n                    case 'Tornado':\r\n                        return NightRainImage;\r\n                    case 'Snow':    \r\n                        return NightSnowImage;\r\n                    case 'Mist':\r\n                    case 'Smoke':\r\n                    case 'Haze':\r\n                    case 'Dust':\r\n                    case 'Fog':\r\n                    case 'Sand':\r\n                    case 'Ash':\r\n                        return MistImage;\r\n                    case 'Clear':\r\n                    case 'Clouds':\r\n                        return NightClearImage;\r\n                }\r\n            }\r\n            switch (weather.weather[0].main) {\r\n                case 'Thunderstorm':\r\n                case 'Drizzle':\r\n                case 'Rain':\r\n                case 'Snow':\r\n                case 'Squall':\r\n                case 'Tornado':\r\n                    return RainImage;\r\n                case 'Mist':\r\n                case 'Smoke':\r\n                case 'Haze':\r\n                case 'Dust':\r\n                case 'Fog':\r\n                case 'Sand':\r\n                case 'Ash':\r\n                    return MistImage;\r\n                case 'Clear':\r\n                    switch (this.getSeason(weather.dt)) {\r\n                        case 'spring':\r\n                            return SpringClearImage;\r\n                        default:\r\n                            return ClearImage;\r\n                    }\r\n                case 'Clouds':\r\n                    switch (this.getSeason(weather.dt)) {\r\n                        case 'spring':\r\n                            return SpringCloudsImage;\r\n                        case 'summer':\r\n                            return SummerCloudsImage;\r\n                        case 'autumn':\r\n                            return AutumnCloudsImage;\r\n                        case 'winter':\r\n                            return WinterCloudsImage;\r\n                    }\r\n            }\r\n        };\r\n\r\n        let imagesPreload = [...IMAGES].map((image) => (\r\n            <img src={image} className='fullHeight preload'></img>\r\n        ));\r\n\r\n        if (error) {\r\n            return (\r\n                <View\r\n                    onSwipeBack={this.goBack}\r\n                    history={this.state.history}\r\n                    activePanel={this.state.activePanel}\r\n                >\r\n                    <Panel id='weatherImage'>\r\n                        <div className='mainGradient fullHeight aligner'>\r\n                            <img src={ErrorImage}  className='loading' />\r\n                            <h1 className='errorMessage faded'>Упс... сломалось :(</h1>\r\n                        </div>\r\n                    </Panel>\r\n                </View>\r\n            );}\r\n        else if (!isLoaded) {\r\n            return (\r\n                <View\r\n                    onSwipeBack={this.goBack}\r\n                    history={this.state.history}\r\n                    activePanel={this.state.activePanel}\r\n                >\r\n                    <Panel id='weatherImage'>\r\n                        <div className='mainGradient fullHeight'>\r\n                            <img src={LoadingImage}  className='loading' />\r\n                            {imagesPreload}\r\n                        </div>\r\n                    </Panel>\r\n                </View>\r\n            );}\r\n        else {\r\n            return (\r\n                <View \r\n\t\t\t\t\tonSwipeBack={this.goBack}\r\n\t\t\t\t\thistory={this.state.history}\r\n\t\t\t\t\tactivePanel={this.state.activePanel}\r\n                    modal={modal}\r\n\t\t\t\t>\r\n                    <Panel id='main'>\r\n                        <div className='mainGradient'>\r\n                            <div className='wrapper'>\r\n                                <h1 className='city' onClick={() => this.setActiveModal('chooseCity')}>{weather.name}</h1>\r\n                                <h1 className='displayText linky' onClick={() => this.goForward('now')}>Сегодня {this.toNormalDate(weather.dt)}</h1>\r\n                                <h2>⛅️ Погода: {weather.weather[0].description}</h2> \r\n                                <h2>🌡 Температура: {Math.round(weather.main.temp)}°C</h2>\r\n                                <h2>🤒 Ощущается как {Math.round(weather.main.feels_like)}°C</h2>\r\n                                <div className='laterBoxes'>\r\n                                    <div className='laterBox faded'>\r\n                                        <h2 className='laterTime'>{this.getTime(hourly[1].dt).time}</h2>\r\n                                        <h2 className='laterTemp'>{Math.round(hourly[1].temp)}°</h2>\r\n                                    </div>\r\n                                    <div className='laterBox faded'>\r\n                                        <h2 className='laterTime'>{this.getTime(hourly[6].dt).time}</h2>\r\n                                        <h2 className='laterTemp'>{Math.round(hourly[6].temp)}°</h2>\r\n                                    </div>\r\n                                    <div className='laterBox faded'>\r\n                                        <h2 className='laterTime'>{this.getTime(hourly[12].dt).time}</h2>\r\n                                        <h2 className='laterTemp'>{Math.round(hourly[12].temp)}°</h2>\r\n                                    </div>\r\n                                </div>\r\n                                <h1 className='displayText'>На неделе</h1>\r\n                                {fore_weather}\r\n                                <h3 className='copyright' onClick={ () => bridge.send(\"VKWebAppOpenWallPost\", {\"owner_id\": -124956046, \"post_id\": 398}) }>\r\n                                    Разработка: Егор • Дизайн: Алина\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    </Panel>\r\n                    {fore_panels}\r\n                    <Panel id='weatherImage'>\r\n                        <div className='mainGradient fullHeight aligner'>\r\n                            <img src={weatherImage(weather)} className='fullHeight varWidth'></img>\r\n                        </div>\r\n                    </Panel>\r\n                    <Panel id='now'>\r\n                        <div className='mainGradient fullHeight'>\r\n                            <div className='wrapper'>\r\n                                <h1 className='city' onClick={() => this.goBack() }>Назад</h1>\r\n                                <h1 className='displayText'>Погода сейчас</h1>\r\n                                <h2 className='cityUnder faded'>в городе {this.state.weather.name}</h2>\r\n                                <h2>⛅️ Погода: {weather.weather[0].description}</h2> \r\n                                <h2>🌡 Температура: {Math.round(weather.main.temp)}°C</h2>\r\n                                <h2>🤒 Ощущается как {Math.round(weather.main.feels_like)}°C</h2>\r\n                                <h2>🌅 Рассвет: {this.getTime(weather.sys.sunrise).time}</h2>\r\n                                <h2>🌇 Закат: {this.getTime(weather.sys.sunset).time}</h2>\r\n                                <h2>💨 Ветер: {this.toWindDirection(weather.wind.deg)} {Math.round(weather.wind.speed)} м/c</h2>\r\n                            </div>\r\n                        </div>\r\n                    </Panel>\r\n                </View>\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}