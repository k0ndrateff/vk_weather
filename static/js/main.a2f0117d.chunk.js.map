{"version":3,"sources":["App.js","index.js"],"names":["App","props","goBack","history","state","pop","activePanel","length","bridge","send","setState","goForward","push","error","isLoaded","temperature","city","feels_like","dt","weather","lat","long","then","data","fetch","res","json","result","main","temp","name","description","catch","console","log","message","this","date","Date","day","getDate","month","getMonth","hours","getHours","time","onSwipeBack","id","className","style","display","alignItems","flexDirection","size","margin","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2f0117d.chunk.js","sourcesContent":["import React from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport { View, Panel, PanelHeader, Spinner } from '@vkontakte/vkui';\n\nclass App extends React.Component {\n\tconstructor(props) {\n        super(props);\n\t\tthis.state = {\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\ttemperature: 0,\n\t\t\tcity: \"\",\n\t\t\tfeels_like: \"\",\n\t\t\tdt: 0,\n\t\t\tweather: \"\",\n\t\t\tactivePanel: 'main',\n\t\t\thistory: ['main']\n\t\t  };\n    }\n\n\tcomponentDidMount() {\n\t\tlet lat = 0;\n        let long = 0;\n        bridge\n            .send('VKWebAppGetGeodata')\n            .then(data => {\n                lat = data.lat;\n                long = data.long;\n                fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\n                    .then(res => res.json())\n                    .then(\n                    (result) => {\n                        this.setState({\n                            isLoaded: true,\n                            temperature: result.main.temp,\n                            city: result.name,\n                            feels_like: result.main.feels_like,\n                            dt: result.dt,\n                            weather: result.weather[0].description\n                        });\n                    },\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            error\n                    });\n                    }\n                )\n            })\n            .catch(error => {\n                console.log(error.message);\n            });\n\t}\n\t\n\t  goBack = () => {\n\t\tconst history = [...this.state.history];\n\t\thistory.pop();\n\t\tconst activePanel = history[history.length - 1];\n\t\tif (activePanel === 'main') {\n\t\t  bridge.send('VKWebAppEnableSwipeBack');\n\t\t}\n\t\tthis.setState({ history, activePanel });\n\t  }\n\t\n\t  goForward = (activePanel) => {\n\t\tconst history = [...this.state.history];\n\t\thistory.push(activePanel);\n\t\tif (this.state.activePanel === 'main') {\n\t\t  bridge.send('VKWebAppDisableSwipeBack');\n\t\t}\n\t\tthis.setState({ history, activePanel });\n\t  }\n\n\trender() {\n\t\tconst { error, isLoaded, temperature, city, feels_like, dt, weather } = this.state;\n        const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\n        let date = new Date(dt * 1000);\n        let day = date.getDate();\n        let month = date.getMonth();\n        let hours = date.getHours();\n        let time = 'утром';\n        if (hours >= 23) { time = 'ночью' } else if ( hours >= 18 ) { time = 'вечером' } else if ( hours >= 12) { time = 'днём' }\n\t\tif (error) {\n\t\t\treturn <View \n\t\t\tonSwipeBack={this.goBack}\n\t\t\thistory={this.state.history}\n\t\t\tactivePanel={this.state.activePanel}\n\t\t>\n\t\t\t<Panel id='main'>\n\t\t\t\t<PanelHeader>Ошибка</PanelHeader>\n\t\t\t\t<div>{error.message}</div>\n\t\t\t</Panel>\n\t\t</View>\n\t\t  } else if (!isLoaded) {\n\t\t\treturn (\n\t\t\t<View onSwipeBack={this.goBack}\n\t\t\thistory={this.state.history}\n\t\t\tactivePanel={this.state.activePanel}\n\t\t>\n\t\t\t<Panel id='main'>\n\t\t\t  <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n\t\t\t\t<Spinner size=\"large\" style={{ margin: '20px 0' }} />\n\t\t\t  </div>\n\t\t\t  </Panel>\n\t\t\t  </View>\n\t\t\t);\n\t\t  } else {\n\t\t\treturn (\n\t\t\t\t<View \n\t\t\t\tonSwipeBack={this.goBack}\n\t\t\t\thistory={this.state.history}\n\t\t\t\tactivePanel={this.state.activePanel}\n\t\t\t>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t  <PanelHeader>{city}</PanelHeader>\n\t\t\t\t\t  <div>\n                <h2 className='dayMonth'>Сегодня {time} <span className='fadedText'>{day} {months[month]}</span></h2>\n                <h3 className='temp'>{temperature}°С</h3>\n                <h3 className='feelsLike'>Ощущается как {feels_like}°С</h3>\n                <h3 className='weatherName'>{weather}</h3>\n            </div>\n\t\t\t\t</Panel>\n\t\t  </View>\n\t\t)}\n\t}\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}