{"version":3,"sources":["App.js","index.js"],"names":["App","props","goBack","history","state","pop","activePanel","length","bridge","send","setState","goForward","push","error","isLoaded","temperature","city","feels_like","dt","weather","other","forecast","lat","long","then","data","fetch","res","json","result","main","temp","name","description","catch","console","log","message","platform","this","date","Date","day","getDate","month","getMonth","hours","getHours","time","onSwipeBack","id","left","className","onClick","mode","SimpleCell","multiline","InfoRow","header","list","clouds","label","undefined","temp_min","temp_max","pressure","humidity","wind","deg","speed","all","style","display","alignItems","flexDirection","size","margin","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf5f01ac.chunk.js","sourcesContent":["import React from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport { View, Panel, PanelHeader, Spinner, Group, CellButton, PanelHeaderBack, Header } from '@vkontakte/vkui';\nimport {  Icon24PlaceOutline, Icon28ErrorCircleOutline, Icon24Spinner } from '@vkontakte/icons';\n\nclass App extends React.Component {\n\tconstructor(props) {\n        super(props);\n\t\tthis.state = {\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\ttemperature: 0,\n\t\t\tcity: \"\",\n\t\t\tfeels_like: \"\",\n\t\t\tdt: 0,\n\t\t\tweather: \"\",\n\t\t\tother: '',\n\t\t\tforecast: '',\n\t\t\tactivePanel: 'main',\n\t\t\thistory: ['main']\n\t\t  };\n    }\n\n\tcomponentDidMount() {\n\t\tlet lat = 0;\n        let long = 0;\n        bridge\n            .send('VKWebAppGetGeodata')\n            .then(data => {\n                lat = data.lat;\n                long = data.long;\n                fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\n                    .then(res => res.json())\n                    .then(\n                    (result) => {\n                        this.setState({\n                            temperature: result.main.temp,\n                            city: result.name,\n                            feels_like: result.main.feels_like,\n                            dt: result.dt,\n                            weather: result.weather[0].description,\n\t\t\t\t\t\t\tother: result\n                        });\n                    },\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            error\n                    \t});\n                    }\n                )\n\t\t\t\tfetch(\"api.openweathermap.org/data/2.5/forecast/daily?lat=\" + lat + \"&lon=\" + long + \"&cnt=1&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\n                    .then(res => res.json())\n                    .then(\n                    (result) => {\n                        this.setState({\n                            isLoaded: true,\n                            forecast: result\n                        });\n                    },\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            error\n                    \t});\n                    }\n                )\n            })\n            .catch(error => {\n                console.log(error.message);\n            });\n\t}\n\t\n\tgoBack = () => {\n\t\tconst history = [...this.state.history];\n\t\thistory.pop();\n\t\tconst activePanel = history[history.length - 1];\n\t\tif (activePanel === 'main') {\n\t\t  bridge.send('VKWebAppEnableSwipeBack');\n\t\t}\n\t\tthis.setState({ history, activePanel });\n\t}\n\t\n\tgoForward = (activePanel) => {\n\t\tconst history = [...this.state.history];\n\t\thistory.push(activePanel);\n\t\tif (this.state.activePanel === 'main') {\n\t\t  bridge.send('VKWebAppDisableSwipeBack');\n\t\t}\n\t\tthis.setState({ history, activePanel });\n\t}\n\n\trender() {\n\t\tconst { platform } = this.props;\n\t\tconst { error, isLoaded, temperature, city, feels_like, dt, weather, other } = this.state;\n        const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\n        let date = new Date(dt * 1000);\n        let day = date.getDate();\n        let month = date.getMonth();\n        let hours = date.getHours();\n        let time = 'утром';\n        if (hours >= 23 || hours <= 4) { time = 'ночью' } else if ( hours >= 18 ) { time = 'вечером' } else if ( hours >= 12) { time = 'днём' }\n\t\tif (error) {\n\t\t\treturn (\n\t\t\t\t<View \n\t\t\t\t\tonSwipeBack={this.goBack}\n\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\tactivePanel={this.state.activePanel}\n\t\t\t\t>\n\t\t\t\t\t<Panel id='main'>\n\t\t\t\t\t\t<PanelHeader left={<Icon28ErrorCircleOutline />}>Ошибка</PanelHeader>\n\t\t\t\t\t\t<div>{error.message}</div>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t);} \n\t\telse if (!isLoaded) {\n\t\t\treturn (\n\t\t\t\t<View \n\t\t\t\t\tonSwipeBack={this.goBack}\n\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\tactivePanel={this.state.activePanel}\n\t\t\t\t>\n\t\t\t\t\t<Panel id='main'>\n\t\t\t\t\t\t<PanelHeader left={<Icon24Spinner />}>Загрузка...</PanelHeader>\n\t\t\t  \t\t\t<div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n\t\t\t\t\t\t\t<Spinner size=\"large\" style={{ margin: '20px 0' }} />\n\t\t\t  \t\t\t</div>\n\t\t\t  \t\t</Panel>\n\t\t\t  \t</View>\n\t\t\t);} \n\t\telse {\n\t\t\treturn (\n\t\t\t\t<View \n\t\t\t\t\tonSwipeBack={this.goBack}\n\t\t\t\t\thistory={this.state.history}\n\t\t\t\t\tactivePanel={this.state.activePanel}\n\t\t\t\t>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t  \t<PanelHeader left={<Icon24PlaceOutline />}>{city}</PanelHeader>\n\t\t\t\t\t  \t<div>\n                \t\t\t<h2 className='dayMonth'>Сегодня {time} <span className='fadedText'>{day} {months[month]}</span></h2>\n                \t\t\t<h3 className='temp'>{temperature}°С</h3>\n                \t\t\t<h3 className='feelsLike'>Ощущается как {feels_like}°С</h3>\n                \t\t\t<h3 className='weatherName'>{weather}</h3>\n\t\t\t\t\t\t\t<Group>\n              \t\t\t\t\t<CellButton onClick={ () => this.goForward('more_weather') }>\n                \t\t\t\t\tЕщё о погоде\n              \t\t\t\t\t</CellButton>\n            \t\t\t\t</Group>\n\t\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t\t<Header mode='secondary'>Прогноз на завтра</Header>\n\t\t\t\t\t\t\t\t<SimpleCell multiline>\n          \t\t\t\t\t\t\t<InfoRow header=\"Погода\">\n            \t\t\t\t\t\t\t{forecast.list[0].weather[0].description}\n          \t\t\t\t\t\t\t</InfoRow>\n        \t\t\t\t\t\t</SimpleCell>\n\t\t\t\t\t\t\t\t<SimpleCell multiline>\n          \t\t\t\t\t\t\t<InfoRow header=\"Температура\">\n            \t\t\t\t\t\t\t{forecast.list[0].temp.day}\n          \t\t\t\t\t\t\t</InfoRow>\n        \t\t\t\t\t\t</SimpleCell>\n\t\t\t\t\t\t\t\t<SimpleCell multiline>\n          \t\t\t\t\t\t\t<InfoRow header=\"Облачность\">\n            \t\t\t\t\t\t\t{forecast.list[0].clouds}\n          \t\t\t\t\t\t\t</InfoRow>\n        \t\t\t\t\t\t</SimpleCell>\n\t\t\t\t\t\t\t</Group>\n            \t\t\t</div>\n\t\t\t\t\t</Panel>\n\t\t\t\t\t<Panel id='more_weather'>\n\t\t\t\t\t\t<PanelHeader\n              \t\t\t\tleft={<PanelHeaderBack  onClick={() => this.goBack()} label={platform === 'VKCOM' ? 'Назад' : undefined} />}\n            \t\t\t>\n              \t\t\t\tТекущая погода\n            \t\t\t</PanelHeader>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Город: {city}</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Погода: {weather}</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Температура: {temperature}°С</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Разброс: {other.main.temp_min}...{other.main.temp_max}°С</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Ощущается как: {feels_like}°С</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Давление: {other.main.pressure} гПа</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Влажность: {other.main.humidity}%</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Ветер: {other.wind.deg}° {other.wind.speed} м/с</p>\n\t\t\t\t\t\t\t<p className='weatherInfo'>Облачность: {other.clouds.all}%</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Panel>\n\t\t  \t\t</View>\n\t\t\t);}\n\t}\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}