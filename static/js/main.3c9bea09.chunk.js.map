{"version":3,"sources":["img/loading.gif","img/error.png","img/clear.png","img/rain.png","App.js","index.js"],"names":["App","props","goBack","history","state","pop","activePanel","length","bridge","send","setState","goForward","push","modalBack","setActiveModal","modalHistory","activeModal","indexOf","splice","toNormalDate","dt","date","Date","getDate","getMonth","getTime","hour","getHours","minute","getMinutes","time","string","day","getDay","updateGeoData","city","fetch","then","res","json","result","lat","lon","weather","error","isLoaded","forecast","daily","slice","hourly","getCityValue","document","getElementById","value","lookupWeather","long","data","error_type","catch","this","fore_weather","map","className","onClick","main","Math","round","temp","fore_panels","id","name","description","feels_like","WeatherPanel","modal","onClose","header","left","right","top","placeholder","onSwipeBack","src","ErrorImage","RainImage","ClearImage","weatherImage","LoadingImage","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.3c9bea09.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.71f6a116.gif\";","export default __webpack_public_path__ + \"static/media/error.def73663.png\";","export default __webpack_public_path__ + \"static/media/clear.3bf4abcd.png\";","export default __webpack_public_path__ + \"static/media/rain.820187e7.png\";","import React from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport { Panel, View, ModalRoot, ModalPage, ModalPageHeader, PanelHeaderClose, PanelHeaderSubmit, FormItem, Input, FormLayout, HorizontalScroll, HorizontalCell, Group, List, Cell } from '@vkontakte/vkui';\r\n\r\nimport LoadingImage from './img/loading.gif';\r\nimport ErrorImage from './img/error.png';\r\nimport ClearImage from './img/clear.png';\r\nimport RainImage from './img/rain.png';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n            isLoaded: false,\r\n            weather: '',\r\n            forecast: '',\r\n            hourly: '',\r\n            activePanel: 'main',\r\n            history: ['main'],\r\n            activeModal: null,\r\n            modalHistory: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let lat = 0;\r\n        let long = 0;\r\n        bridge.send('VKWebAppGetGeodata')\r\n                .then(data => {\r\n                    if (data.error_type == 'client_error') {\r\n                        lat = 30;\r\n                        long = 50;\r\n                    }\r\n                    else {\r\n                        lat = data.lat;\r\n                        long = data.long;\r\n                    }\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({ \r\n                                weather: result\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                            });\r\n                        })\r\n                    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\"+ lat +\"&lon=\" + long + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                        .then(res => res.json())\r\n                        .then((result) => {\r\n                            this.setState({\r\n                                isLoaded: true, \r\n                                forecast: result.daily.slice(1),\r\n                                hourly: result.hourly\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            this.setState({\r\n                                isLoaded: true,\r\n                                error\r\n                            });\r\n                        }\r\n                    )\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ \r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                });\r\n    }\r\n\r\n    goBack = () => {\r\n\t\tconst history = [...this.state.history];\r\n\t\thistory.pop();\r\n\t\tconst activePanel = history[history.length - 1];\r\n\t\tif (activePanel === 'main') {\r\n\t\t  bridge.send('VKWebAppEnableSwipeBack');\r\n\t\t}\r\n\t\tthis.setState({ history, activePanel });\r\n\t}\r\n\t\r\n\tgoForward = (activePanel) => {\r\n\t\tconst history = [...this.state.history];\r\n\t\thistory.push(activePanel);\r\n\t\tif (this.state.activePanel === 'main') {\r\n\t\t  bridge.send('VKWebAppDisableSwipeBack');\r\n\t\t}\r\n\t\tthis.setState({ history, activePanel });\r\n\t}\r\n\r\n    modalBack = () => {\r\n        this.setActiveModal(this.state.modalHistory[this.state.modalHistory.length - 2]);\r\n    };\r\n\r\n    setActiveModal = (activeModal) => {\r\n        activeModal = activeModal || null;\r\n        let modalHistory = this.state.modalHistory ? [...this.state.modalHistory] : [];\r\n    \r\n        if (activeModal === null) {\r\n          modalHistory = [];\r\n        } else if (modalHistory.indexOf(activeModal) !== -1) {\r\n          modalHistory = modalHistory.splice(0, modalHistory.indexOf(activeModal) + 1);\r\n        } else {\r\n          modalHistory.push(activeModal);\r\n        }\r\n    \r\n        this.setState({\r\n          activeModal,\r\n          modalHistory\r\n        });\r\n    };\r\n\r\n    toNormalDate = (dt) => {\r\n        const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\r\n        let date = new Date(dt * 1000);\r\n        let day = date.getDate();\r\n        let month = date.getMonth();\r\n        return day + ' ' + months[month];\r\n    }\r\n\r\n    getTime = (dt) => {\r\n        let date = new Date(dt * 1000);\r\n        let hour = date.getHours();\r\n        let minute = date.getMinutes();\r\n        let time = 'утром';\r\n        const week = ['Вс', 'Пн', 'Вт', 'Cр', 'Чт', 'Пт', 'Сб'];\r\n        let dayOfWeek = week[date.getDay()];\r\n        if (hour < 5 || hour > 22) { time = 'ночью' } else if (hour > 18) { time = 'вечером' } else if (hour > 10) { time = 'днём' }\r\n        if (hour < 10) { hour = '0' + hour; }\r\n        if (minute < 10) { minute = '0' + minute; }\r\n        let res = {\r\n            hour: hour,\r\n            minute: minute,\r\n            time: hour + ':' + minute,\r\n            string: time,\r\n            day: dayOfWeek\r\n        }\r\n        return res\r\n    }\r\n\r\n    updateGeoData = (city) => {\r\n        this.modalBack();\r\n        fetch('https://api.openweathermap.org/geo/1.0/direct?q=' + city + '&appid=e937bb61987a79d09b7604a3375a9941')\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\"+ result[0].lat +\"&lon=\" + result[0].lon + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                    .then(res => res.json())\r\n                    .then((result) => {\r\n                        this.setState({ \r\n                            weather: result\r\n                        });\r\n                    },\r\n                    (error) => {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            error\r\n                    });\r\n                })\r\n                fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\"+ result[0].lat +\"&lon=\" + result[0].lon + \"&units=metric&lang=ru&appid=e937bb61987a79d09b7604a3375a9941\")\r\n                    .then(res => res.json())\r\n                    .then((result) => {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            forecast: result.daily.slice(1),\r\n                            hourly: result.hourly\r\n                        });\r\n                    },\r\n                    (error) => {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            error\r\n                    });\r\n            }\r\n        )\r\n            },\r\n            (error) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                });\r\n        })\r\n    }\r\n\r\n    getCityValue = () => {\r\n        if (document.getElementById('city') != null) {\r\n            return document.getElementById('city').value;\r\n        } \r\n        else { return null }\r\n    }\r\n\r\n    lookupWeather = (weather) => {\r\n         const list = {\r\n            'Thunderstorm': 'шторм',\r\n            'Drizzle': 'дождик',\r\n            'Rain': 'дождь',\r\n            'Snow': 'снег',\r\n            'Mist': 'туман',\r\n            'Smoke': 'смог',\r\n            'Haze': 'дымка',\r\n            'Dust': 'пыль',\r\n            'Fog': 'туман',\r\n            'Sand': 'песок',\r\n            'Ash': 'задымление',\r\n            'Squall': 'шквал',\r\n            'Tornado': 'торнадо',\r\n            'Clear': 'ясно',\r\n            'Clouds': 'облачно'\r\n        };\r\n        return list[weather];\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, weather, hourly, forecast } = this.state;\r\n\r\n        const WeatherPanel = (weather) => { \r\n            return (\r\n                <Panel id={weather.dt}>\r\n                    <div className='mainGradient fullHeight'>\r\n                        <div className='wrapper'>\r\n                            <h1 className='city' onClick={() => this.goBack() }>Назад</h1>\r\n                            <h1 className='displayText'>Погода {this.toNormalDate(weather.dt)} <span className='faded'>{this.getTime(weather.dt).day}</span></h1>\r\n                            <h2 className='cityUnder faded'>в городе {this.state.weather.name}</h2>\r\n                            <h2>{weather.weather[0].description}</h2> \r\n                            <h2>Температура: {Math.round(weather.temp.day)}°C</h2>\r\n                            <h2>Ощущается как {Math.round(weather.feels_like.day)}°C</h2>\r\n                        </div>\r\n                    </div>\r\n                </Panel>\r\n        );};\r\n\r\n        let fore_weather = [...forecast].map((day) => (\r\n            <div className=\"laterBoxes foreBack faded\" onClick={() => this.goForward(day.dt) } >\r\n                <h2 className=\"fore\">{this.toNormalDate(day.dt)}</h2>\r\n                <h2 className=\"fore\">{this.lookupWeather(day.weather[0].main)}</h2>\r\n                <h2 className=\"fore\">{Math.round(day.temp.day)}°C</h2>\r\n            </div>\r\n        ));\r\n\r\n        let fore_panels = [...forecast].map((day) => (\r\n            WeatherPanel(day)\r\n        ));\r\n        \r\n        const modal = (\r\n            <ModalRoot\r\n                activeModal={this.state.activeModal}\r\n                onClose={this.modalBack}\r\n            >\r\n                <ModalPage\r\n                    id='chooseCity'\r\n                    onClose={this.modalBack}\r\n                    header={\r\n                        <ModalPageHeader\r\n                          left={<PanelHeaderClose onClick={this.modalBack}/>}\r\n                          right={<PanelHeaderSubmit onClick={() => { this.updateGeoData(this.getCityValue()); }}/>}\r\n                        >\r\n                          Выбрать город\r\n                        </ModalPageHeader>\r\n                      }\r\n                >\r\n                    <FormLayout>\r\n                        <FormItem top='Введите название'>\r\n                            <Input id='city' placeholder={weather.name} />\r\n                        </FormItem>\r\n                    </FormLayout> \r\n                    <Group>\r\n                        <List>\r\n                            <Cell onClick={() => { this.updateGeoData('Москва') }}>Москва</Cell>\r\n                            <Cell onClick={() => { this.updateGeoData('Париж') }}>Париж</Cell>\r\n                            <Cell onClick={() => { this.updateGeoData('Вашингтон') }}>Вашингтон</Cell>\r\n                            <Cell onClick={() => { this.updateGeoData('Токио') }}>Токио</Cell>\r\n                        </List>\r\n                    </Group>\r\n                </ModalPage>\r\n            </ModalRoot>\r\n        ); \r\n\r\n        let weatherImage = (weather) => { \r\n            switch (weather.weather[0].main) {\r\n                case 'Thunderstorm':\r\n                case 'Drizzle':\r\n                case 'Rain':\r\n                case 'Snow':\r\n                case 'Mist':\r\n                case 'Smoke':\r\n                case 'Haze':\r\n                case 'Dust':\r\n                case 'Fog':\r\n                case 'Sand':\r\n                case 'Ash':\r\n                case 'Squall':\r\n                case 'Tornado':\r\n                    return RainImage;\r\n                case 'Clear':\r\n                case 'Clouds':\r\n                    return ClearImage;\r\n            }\r\n        };\r\n\r\n        if (error) {\r\n            return (\r\n                <View\r\n                    onSwipeBack={this.goBack}\r\n                    history={this.state.history}\r\n                    activePanel={this.state.activePanel}\r\n                >\r\n                    <Panel id='main'>\r\n                        <div className='mainGradient fullHeight'>\r\n                            <img src={ErrorImage}  className='loading' />\r\n                        </div>\r\n                    </Panel>\r\n                </View>\r\n            );}\r\n        else if (!isLoaded) {\r\n            return (\r\n                <View\r\n                    onSwipeBack={this.goBack}\r\n                    history={this.state.history}\r\n                    activePanel={this.state.activePanel}\r\n                >\r\n                    <Panel id='main'>\r\n                        <div className='mainGradient fullHeight'>\r\n                            <img src={LoadingImage}  className='loading' />\r\n                        </div>\r\n                    </Panel>\r\n                </View>\r\n            );}\r\n        else {\r\n            return (\r\n                <View \r\n\t\t\t\t\tonSwipeBack={this.goBack}\r\n\t\t\t\t\thistory={this.state.history}\r\n\t\t\t\t\tactivePanel={this.state.activePanel}\r\n                    modal={modal}\r\n\t\t\t\t>\r\n                    <Panel id='main'>\r\n                        <div className='mainGradient'>\r\n                            <img src={weatherImage(weather)} className='loading weatherAnim'></img>\r\n                            <div className='wrapper'>\r\n                                <h1 className='city' onClick={() => this.setActiveModal('chooseCity')}>{weather.name}</h1>\r\n                                <h1 className='displayText'>Сегодня {this.toNormalDate(weather.dt)}</h1>\r\n                                <h2>Погода: {weather.weather[0].description}</h2> \r\n                                <h2>Температура: {Math.round(weather.main.temp)}°C</h2>\r\n                                <h2>Ощущается как {Math.round(weather.main.feels_like)}°C</h2>\r\n                                <div className='laterBoxes'>\r\n                                    <div className='laterBox faded'>\r\n                                        <h2 className='laterTime'>{this.getTime(hourly[1].dt).time}</h2>\r\n                                        <h2 className='laterTemp'>{Math.round(hourly[1].temp)}°</h2>\r\n                                    </div>\r\n                                    <div className='laterBox faded'>\r\n                                        <h2 className='laterTime'>{this.getTime(hourly[6].dt).time}</h2>\r\n                                        <h2 className='laterTemp'>{Math.round(hourly[6].temp)}°</h2>\r\n                                    </div>\r\n                                    <div className='laterBox faded'>\r\n                                        <h2 className='laterTime'>{this.getTime(hourly[12].dt).time}</h2>\r\n                                        <h2 className='laterTemp'>{Math.round(hourly[12].temp)}°</h2>\r\n                                    </div>\r\n                                </div>\r\n                                <h1 className='displayText'>На неделе</h1>\r\n                                {fore_weather}\r\n                            </div>\r\n                        </div>\r\n                    </Panel>\r\n                    {fore_panels}\r\n                </View>\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}